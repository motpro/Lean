<?php

namespace Proxies\__CG__\Lean\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Contact extends \Lean\AdminBundle\Entity\Contact implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'tag', 'masterId', 'userId', 'username', 'name', 'email', 'companyId', 'job', 'age', 'gender', 'qq', 'officePhone', 'officeFax', 'privatePhone', 'mobile', 'description', 'modifiedDate', 'fileId', 'isClosed', 'userColor');
        }

        return array('__isInitialized__', 'id', 'tag', 'masterId', 'userId', 'username', 'name', 'email', 'companyId', 'job', 'age', 'gender', 'qq', 'officePhone', 'officeFax', 'privatePhone', 'mobile', 'description', 'modifiedDate', 'fileId', 'isClosed', 'userColor');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Contact $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTag($tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTag', array($tag));

        return parent::setTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function getTag()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTag', array());

        return parent::getTag();
    }

    /**
     * {@inheritDoc}
     */
    public function setMasterId($masterId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMasterId', array($masterId));

        return parent::setMasterId($masterId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMasterId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMasterId', array());

        return parent::getMasterId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId($userId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', array($userId));

        return parent::setUserId($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', array());

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompanyId($companyId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompanyId', array($companyId));

        return parent::setCompanyId($companyId);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompanyId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompanyId', array());

        return parent::getCompanyId();
    }

    /**
     * {@inheritDoc}
     */
    public function setJob($job)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJob', array($job));

        return parent::setJob($job);
    }

    /**
     * {@inheritDoc}
     */
    public function getJob()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJob', array());

        return parent::getJob();
    }

    /**
     * {@inheritDoc}
     */
    public function setAge($age)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAge', array($age));

        return parent::setAge($age);
    }

    /**
     * {@inheritDoc}
     */
    public function getAge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAge', array());

        return parent::getAge();
    }

    /**
     * {@inheritDoc}
     */
    public function setGender($gender)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGender', array($gender));

        return parent::setGender($gender);
    }

    /**
     * {@inheritDoc}
     */
    public function getGender()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', array());

        return parent::getGender();
    }

    /**
     * {@inheritDoc}
     */
    public function setQq($qq)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQq', array($qq));

        return parent::setQq($qq);
    }

    /**
     * {@inheritDoc}
     */
    public function getQq()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQq', array());

        return parent::getQq();
    }

    /**
     * {@inheritDoc}
     */
    public function setOfficePhone($officePhone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOfficePhone', array($officePhone));

        return parent::setOfficePhone($officePhone);
    }

    /**
     * {@inheritDoc}
     */
    public function getOfficePhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOfficePhone', array());

        return parent::getOfficePhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setOfficeFax($officeFax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOfficeFax', array($officeFax));

        return parent::setOfficeFax($officeFax);
    }

    /**
     * {@inheritDoc}
     */
    public function getOfficeFax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOfficeFax', array());

        return parent::getOfficeFax();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrivatePhone($privatePhone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrivatePhone', array($privatePhone));

        return parent::setPrivatePhone($privatePhone);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrivatePhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrivatePhone', array());

        return parent::getPrivatePhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setMobile($mobile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMobile', array($mobile));

        return parent::setMobile($mobile);
    }

    /**
     * {@inheritDoc}
     */
    public function getMobile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMobile', array());

        return parent::getMobile();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedDate($modifiedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedDate', array($modifiedDate));

        return parent::setModifiedDate($modifiedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedDate', array());

        return parent::getModifiedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileId($fileId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileId', array($fileId));

        return parent::setFileId($fileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileId', array());

        return parent::getFileId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsClosed($isClosed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsClosed', array($isClosed));

        return parent::setIsClosed($isClosed);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsClosed', array());

        return parent::getIsClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserColor($userColor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserColor', array($userColor));

        return parent::setUserColor($userColor);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserColor', array());

        return parent::getUserColor();
    }

}
