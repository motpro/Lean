<?php

namespace Proxies\__CG__\Lean\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Ucmember extends \Lean\AdminBundle\Entity\Ucmember implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'uid', 'username', 'password', 'email', 'myid', 'myidkey', 'regip', 'regdate', 'lastloginip', 'lastlogintime', 'salt', 'secques');
        }

        return array('__isInitialized__', 'uid', 'username', 'password', 'email', 'myid', 'myidkey', 'regip', 'regdate', 'lastloginip', 'lastlogintime', 'salt', 'secques');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Ucmember $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getUid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getUid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUid', array());

        return parent::getUid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setMyid($myid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMyid', array($myid));

        return parent::setMyid($myid);
    }

    /**
     * {@inheritDoc}
     */
    public function getMyid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMyid', array());

        return parent::getMyid();
    }

    /**
     * {@inheritDoc}
     */
    public function setMyidkey($myidkey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMyidkey', array($myidkey));

        return parent::setMyidkey($myidkey);
    }

    /**
     * {@inheritDoc}
     */
    public function getMyidkey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMyidkey', array());

        return parent::getMyidkey();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegip($regip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegip', array($regip));

        return parent::setRegip($regip);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegip()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegip', array());

        return parent::getRegip();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegdate($regdate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegdate', array($regdate));

        return parent::setRegdate($regdate);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegdate', array());

        return parent::getRegdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastloginip($lastloginip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastloginip', array($lastloginip));

        return parent::setLastloginip($lastloginip);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastloginip()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastloginip', array());

        return parent::getLastloginip();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastlogintime($lastlogintime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastlogintime', array($lastlogintime));

        return parent::setLastlogintime($lastlogintime);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastlogintime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastlogintime', array());

        return parent::getLastlogintime();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', array($salt));

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', array());

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function setSecques($secques)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSecques', array($secques));

        return parent::setSecques($secques);
    }

    /**
     * {@inheritDoc}
     */
    public function getSecques()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSecques', array());

        return parent::getSecques();
    }

}
